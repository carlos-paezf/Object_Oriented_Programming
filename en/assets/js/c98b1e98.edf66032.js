"use strict";(self.webpackChunkobject_oriented_programming=self.webpackChunkobject_oriented_programming||[]).push([[8880],{1470:(e,n,a)=>{a.d(n,{A:()=>y});var s=a(6540),r=a(4164),i=a(3104),t=a(6347),o=a(205),c=a(7485),l=a(1682),d=a(679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:a,default:s}})=>({value:e,label:n,attributes:a,default:s}))}(a);return function(e){const n=(0,l.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,a])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const a=(0,t.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(r),(0,s.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})},[r,a])]}function j(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,i=h(e),[t,c]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find(e=>e.default)??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i})),[l,u]=p({queryString:a,groupId:r}),[j,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,r]=(0,d.Dv)(n);return[a,(0,s.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),x=(()=>{const e=l??j;return m({value:e,tabValues:i})?e:null})();(0,o.A)(()=>{x&&c(x)},[x]);return{selectedValue:t,selectValue:(0,s.useCallback)(e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),g(e)},[u,g,i]),tabValues:i}}var g=a(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=a(4848);function v({className:e,block:n,selectedValue:a,selectValue:s,tabValues:t}){const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),l=e=>{const n=e.currentTarget,r=o.indexOf(n),i=t[r].value;i!==a&&(c(n),s(i))},d=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const a=o.indexOf(e.currentTarget)+1;n=o[a]??o[0];break}case"ArrowLeft":{const a=o.indexOf(e.currentTarget)-1;n=o[a]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:t.map(({value:e,label:n,attributes:s})=>(0,b.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:l,...s,className:(0,r.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function f({lazy:e,children:n,selectedValue:a}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===a);return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function C(e){const n=j(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",x.tabList),children:[(0,b.jsx)(v,{...n,...e}),(0,b.jsx)(f,{...n,...e})]})}function y(e){const n=(0,g.A)();return(0,b.jsx)(C,{...e,children:u(e.children)},String(n))}},4415:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"block-01_oop-fundamentals/basic-concepts","title":"Conceptos Base","description":"La Programaci\xf3n Orientada a Objetos (POO) es un paradigma que organiza el software como una colecci\xf3n de objetos que interact\xfaan entre s\xed. Cada objeto es una instancia de una clase, que act\xfaa como plantilla para definir sus atributos (estado) y m\xe9todos (comportamiento).","source":"@site/docs/block-01_oop-fundamentals/01_basic-concepts.md","sourceDirName":"block-01_oop-fundamentals","slug":"/block-01_oop-fundamentals/basic-concepts","permalink":"/Object_Oriented_Programming_Intersemester/en/docs/block-01_oop-fundamentals/basic-concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/block-01_oop-fundamentals/01_basic-concepts.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Bloque 01 - Fundamentos de la POO en Java","permalink":"/Object_Oriented_Programming_Intersemester/en/docs/category/bloque-01---fundamentos-de-la-poo-en-java"},"next":{"title":"Introducci\xf3n a la Programaci\xf3n Orientada a Objetos","permalink":"/Object_Oriented_Programming_Intersemester/en/docs/block-01_oop-fundamentals/OOP-introduction"}}');var r=a(4848),i=a(8453),t=a(1470),o=a(9365);const c={sidebar_position:1},l="Conceptos Base",d={},u=[{value:"\xbfQu\xe9 es una clase?",id:"qu\xe9-es-una-clase",level:2},{value:"\xbfQu\xe9 es un objeto?",id:"qu\xe9-es-un-objeto",level:2},{value:"Analog\xeda simple",id:"analog\xeda-simple",level:2},{value:"C\xf3digo en Java de Conceptos B\xe1sicos",id:"c\xf3digo-en-java-de-conceptos-b\xe1sicos",level:2},{value:"Ejemplo b\xe1sico: Clase <code>Person</code>",id:"ejemplo-b\xe1sico-clase-person",level:3},{value:"Ejemplo intermedio: modularidad",id:"ejemplo-intermedio-modularidad",level:3},{value:"Diferencias entre Programaci\xf3n Estructurada y Programaci\xf3n Orientada a Objetos",id:"diferencias-entre-programaci\xf3n-estructurada-y-programaci\xf3n-orientada-a-objetos",level:2},{value:"Mini proyecto: Sistema de Registro de Mascotas",id:"mini-proyecto-sistema-de-registro-de-mascotas",level:2},{value:"Reflexi\xf3n final de Conceptos Base",id:"reflexi\xf3n-final-de-conceptos-base",level:2},{value:"Aplicaci\xf3n pr\xe1ctica de Conceptos Base",id:"aplicaci\xf3n-pr\xe1ctica-de-conceptos-base",level:2},{value:"Recursos y Bibliograf\xeda",id:"recursos-y-bibliograf\xeda",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"conceptos-base",children:"Conceptos Base"})}),"\n",(0,r.jsxs)(n.p,{children:["La ",(0,r.jsx)(n.strong,{children:"Programaci\xf3n Orientada a Objetos (POO)"})," es un paradigma que organiza el software como una colecci\xf3n de ",(0,r.jsx)(n.strong,{children:"objetos"})," que interact\xfaan entre s\xed. Cada objeto es una ",(0,r.jsx)(n.strong,{children:"instancia de una clase"}),", que act\xfaa como plantilla para definir sus atributos (estado) y m\xe9todos (comportamiento)."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"\u201cPensar en objetos es similar a c\xf3mo percibimos el mundo: un carro, una persona o una cuenta bancaria tienen caracter\xedsticas propias y comportamientos definidos\u201d."})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"qu\xe9-es-una-clase",children:"\xbfQu\xe9 es una clase?"}),"\n",(0,r.jsx)(n.p,{children:"Una clase es una estructura que define las propiedades (atributos) y capacidades (m\xe9todos) que tendr\xe1n sus objetos. Es como el plano arquitect\xf3nico de una casa."}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n    class Car {\n        -String color\n        -String model\n        +void startEngine()\n        +void stopEngine()\n    }"}),"\n",(0,r.jsx)(n.h2,{id:"qu\xe9-es-un-objeto",children:"\xbfQu\xe9 es un objeto?"}),"\n",(0,r.jsxs)(n.p,{children:["Un ",(0,r.jsx)(n.strong,{children:"objeto"})," es una ",(0,r.jsx)(n.strong,{children:"instancia concreta"})," de una clase. Si la clase es el plano de una casa, un objeto es una casa construida con ese plano. Tiene valores espec\xedficos en sus atributos y puede ejecutar los m\xe9todos definidos."]}),"\n",(0,r.jsx)(n.p,{children:"Ejemplo real:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Clase: ",(0,r.jsx)(n.code,{children:"Car"})]}),"\n",(0,r.jsxs)(n.li,{children:["Objeto: ",(0,r.jsx)(n.code,{children:'myCar = new Car("red", "Toyota")'})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"analog\xeda-simple",children:"Analog\xeda simple"}),"\n",(0,r.jsxs)(n.p,{children:["Piensa en una ",(0,r.jsx)(n.strong,{children:"receta de cocina (clase)"})," que describe c\xf3mo hacer una torta, y una ",(0,r.jsx)(n.strong,{children:"torta espec\xedfica (objeto)"})," que t\xfa preparas usando esa receta. Cada torta hecha con esa receta puede tener variaciones (ingredientes personalizados), pero todas siguen la misma estructura b\xe1sica."]}),"\n",(0,r.jsx)(n.h2,{id:"c\xf3digo-en-java-de-conceptos-b\xe1sicos",children:"C\xf3digo en Java de Conceptos B\xe1sicos"}),"\n",(0,r.jsxs)(n.h3,{id:"ejemplo-b\xe1sico-clase-person",children:["Ejemplo b\xe1sico: Clase ",(0,r.jsx)(n.code,{children:"Person"})]}),"\n","\n",(0,r.jsxs)(t.A,{children:[(0,r.jsx)(o.A,{value:"diagrama",label:"Diagrama de Clases",children:(0,r.jsx)(n.mermaid,{value:"classDiagram\n    class Person {\n        -String name\n        -int age\n        +string getName()\n        +int getAge()\n        +void greet()\n    }"})}),(0,r.jsx)(o.A,{value:"java",label:"Ejemplo de Clase",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Person.java" showLineNumbers',children:'/**\n * Represents a person with a name and age.\n */\npublic class Person {\n    private String name;\n    private int age;\n\n    /**\n     * Constructs a Person with name and age.\n     * @param name The person\'s name.\n     * @param age The person\'s age.\n     */\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    /** Returns the person\'s name. */\n    public String getName() {\n        return name;\n    }\n\n    /** Returns the person\'s age. */\n    public int getAge() {\n        return age;\n    }\n\n    /** Prints a greeting from the person. */\n    public void greet() {\n        System.out.println("Hi, my name is " + name + " and I\'m " + age + " years old.");\n    }\n}\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"ejemplo-intermedio-modularidad",children:"Ejemplo intermedio: modularidad"}),"\n",(0,r.jsxs)(t.A,{children:[(0,r.jsx)(o.A,{value:"diagrama",label:"Diagrama de Clases",children:(0,r.jsx)(n.mermaid,{value:"classDiagram\n    class Car {\n        - String model\n        - boolean engineOn\n        + Car(String model)\n        + void start()\n        + void stop()\n        + boolean isEngineOn()\n        + String getModel()\n    }\n\n    class CarService {\n        + void drive(Car car)\n    }\n\n    class CarTest {\n        <<Test>>\n        + void testEngineStartStop()\n    }\n\n    CarService --\x3e Car : uses\n    CarTest --\x3e Car : tests"})}),(0,r.jsx)(o.A,{value:"java1",label:"Representaci\xf3n de Modelo",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="domain/Car.java" showLineNumbers',children:"package domain;\n\n/**\n * Represents a car with model and engine state.\n */\npublic class Car {\n    private String model;\n    private boolean engineOn;\n\n    public Car(String model) {\n        this.model = model;\n        this.engineOn = false;\n    }\n\n    public void start() {\n        engineOn = true;\n    }\n\n    public void stop() {\n        engineOn = false;\n    }\n\n    public boolean isEngineOn() {\n        return engineOn;\n    }\n\n    public String getModel() {\n        return model;\n    }\n}\n"})})}),(0,r.jsx)(o.A,{value:"java2",label:"Representaci\xf3n de Servicio",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="application/CarService.java" showLineNumbers',children:'package application;\n\nimport domain.Car;\n\n/**\n * CarService manages actions related to a car.\n */\npublic class CarService {\n    public void drive(Car car) {\n        if (car.isEngineOn()) {\n            System.out.println("Driving the " + car.getModel());\n        } else {\n            System.out.println("Start the engine first!");\n        }\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"java3",label:"Test Unitario",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="test/CarTest.java" showLineNumbers',children:'import domain.Car;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CarTest {\n\n    @Test\n    void testEngineStartStop() {\n        Car car = new Car("Mazda");\n        assertFalse(car.isEngineOn());\n        car.start();\n        assertTrue(car.isEngineOn());\n        car.stop();\n        assertFalse(car.isEngineOn());\n    }\n}\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"diferencias-entre-programaci\xf3n-estructurada-y-programaci\xf3n-orientada-a-objetos",children:"Diferencias entre Programaci\xf3n Estructurada y Programaci\xf3n Orientada a Objetos"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Caracter\xedstica"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Programaci\xf3n Estructurada (PE)"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Programaci\xf3n Orientada a Objetos (POO)"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Paradigma"})}),(0,r.jsx)(n.td,{children:"Procedural"}),(0,r.jsx)(n.td,{children:"Basado en objetos"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Unidad principal"})}),(0,r.jsx)(n.td,{children:"Funci\xf3n / procedimiento"}),(0,r.jsx)(n.td,{children:"Objeto (instancia de clase)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Organizaci\xf3n del c\xf3digo"})}),(0,r.jsx)(n.td,{children:"Secuencia de instrucciones y funciones"}),(0,r.jsx)(n.td,{children:"Clases que encapsulan datos y m\xe9todos"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Encapsulamiento"})}),(0,r.jsx)(n.td,{children:"No est\xe1 presente"}),(0,r.jsx)(n.td,{children:"Central: atributos + m\xe9todos en la misma clase"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Reutilizaci\xf3n de c\xf3digo"})}),(0,r.jsx)(n.td,{children:"Limitada a funciones"}),(0,r.jsx)(n.td,{children:"Alta, gracias a herencia, composici\xf3n y polimorfismo"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Abstracci\xf3n"})}),(0,r.jsx)(n.td,{children:"Bajo nivel (se trabaja con datos directamente"}),(0,r.jsx)(n.td,{children:"Alto nivel (modelos del mundo real)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Manejo del estado"})}),(0,r.jsx)(n.td,{children:"Variables globales o locales"}),(0,r.jsx)(n.td,{children:"Estado mantenido dentro de objetos"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Mantenimiento"})}),(0,r.jsx)(n.td,{children:"Dif\xedcil en proyectos grandes"}),(0,r.jsx)(n.td,{children:"M\xe1s organizado, f\xe1cil de mantener"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Ejemplo t\xedpico"})}),(0,r.jsx)(n.td,{children:"C\xe1lculo de promedio de notas con funciones"}),(0,r.jsxs)(n.td,{children:["Gesti\xf3n de un curso con objetos ",(0,r.jsx)(n.code,{children:"Student"}),", ",(0,r.jsx)(n.code,{children:"Course"}),", ",(0,r.jsx)(n.code,{children:"Teacher"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Lenguajes comunes"})}),(0,r.jsx)(n.td,{children:"C, Pascal"}),(0,r.jsx)(n.td,{children:"Java, C++, Python, C#, Kotlin"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Imagina construir una f\xe1brica de autos:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PE:"})," cada empleado tiene instrucciones escritas en papel (funciones separadas); no hay roles ni jerarqu\xeda."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"POO:"})," cada empleado es parte de un departamento (clase), con tareas claras, roles definidos y comunicaci\xf3n estructurada."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["La POO ",(0,r.jsx)(n.strong,{children:"no reemplaza"})," a la PE, sino que la extiende y organiza mejor para proyectos grandes y colaborativos. Comprender ambas permite elegir la mejor herramienta seg\xfan el contexto del problema."]}),"\n",(0,r.jsx)(n.h2,{id:"mini-proyecto-sistema-de-registro-de-mascotas",children:"Mini proyecto: Sistema de Registro de Mascotas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Clases: ",(0,r.jsx)(n.code,{children:"Pet"}),", ",(0,r.jsx)(n.code,{children:"Owner"})]}),"\n",(0,r.jsx)(n.li,{children:"Operaciones: agregar mascota, mostrar datos, cambiar due\xf1o"}),"\n",(0,r.jsxs)(n.li,{children:["Estructura:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"edu.usta.domain.Pet"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"edu.usta.domain.Owner"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"edu.usta.application.PetService"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"edu.usta.ui.MainApp"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Prop\xf3sito: integrar creaci\xf3n de objetos, encapsulamiento y modularidad b\xe1sica."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"reflexi\xf3n-final-de-conceptos-base",children:"Reflexi\xf3n final de Conceptos Base"}),"\n",(0,r.jsx)(n.p,{children:"Principios SOLID aplicados:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"S:"})," Person, Car y Pet tienen responsabilidades claras."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O:"})," Las clases est\xe1n abiertas a extensi\xf3n (nuevos m\xe9todos) sin modificar su implementaci\xf3n."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Patrones aplicados:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entidad (Entity):"})," Las clases representan conceptos del dominio real."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Servicio (Service):"})," CarService gestiona la l\xf3gica de negocio sin modificar la entidad."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"aplicaci\xf3n-pr\xe1ctica-de-conceptos-base",children:"Aplicaci\xf3n pr\xe1ctica de Conceptos Base"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["En videojuegos: ",(0,r.jsx)(n.code,{children:"Player"}),", ",(0,r.jsx)(n.code,{children:"Enemy"}),", ",(0,r.jsx)(n.code,{children:"Weapon"})," como clases."]}),"\n",(0,r.jsxs)(n.li,{children:["En sistemas acad\xe9micos: ",(0,r.jsx)(n.code,{children:"Student"}),", ",(0,r.jsx)(n.code,{children:"Course"}),", ",(0,r.jsx)(n.code,{children:"Teacher"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["En banca: ",(0,r.jsx)(n.code,{children:"Account"}),", ",(0,r.jsx)(n.code,{children:"Transaction"}),", ",(0,r.jsx)(n.code,{children:"Customer"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Escenario de clase:"})," Crear un sistema donde cada estudiante crea su propio objeto Book, con atributos title, author y year, y m\xe9todos printInfo() y updateYear()."]}),"\n",(0,r.jsx)(n.h2,{id:"recursos-y-bibliograf\xeda",children:"Recursos y Bibliograf\xeda"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Eckel, B. (2006). Thinking in Java. Prentice Hall."}),"\n",(0,r.jsxs)(n.li,{children:["Oracle. (2024). ",(0,r.jsx)(n.a,{href:"https://docs.oracle.com/javase/tutorial/java/concepts/class.html",children:"Classes and Objects (Java Documentation)"})]}),"\n",(0,r.jsx)(n.li,{children:"Horstmann, C. S. (2020). Core Java Volume I\u2013Fundamentals. Pearson Education."}),"\n",(0,r.jsxs)(n.li,{children:["Baeldung. (2023). ",(0,r.jsx)(n.a,{href:"https://www.baeldung.com/java-oop",children:"Object-Oriented Programming in Java"})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>o});var s=a(6540);const r={},i=s.createContext(r);function t(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(i.Provider,{value:n},e.children)}},9365:(e,n,a)=>{a.d(n,{A:()=>t});a(6540);var s=a(4164);const r={tabItem:"tabItem_Ymn6"};var i=a(4848);function t({children:e,hidden:n,className:a}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,a),hidden:n,children:e})}}}]);