"use strict";(self.webpackChunkobject_oriented_programming=self.webpackChunkobject_oriented_programming||[]).push([[2982],{9180:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>j,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"block-01_oop-fundamentals/constructor_getters_setters_toString","title":"Constructores, Getters y Setters, toString","description":"\xbfQu\xe9 es el Encapsulamiento?","source":"@site/docs/block-01_oop-fundamentals/05_constructor_getters_setters_toString.md","sourceDirName":"block-01_oop-fundamentals","slug":"/block-01_oop-fundamentals/constructor_getters_setters_toString","permalink":"/Object_Oriented_Programming_Intersemester/en/docs/block-01_oop-fundamentals/constructor_getters_setters_toString","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/block-01_oop-fundamentals/05_constructor_getters_setters_toString.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Unit Testing con JUnit para JDK 21+","permalink":"/Object_Oriented_Programming_Intersemester/en/docs/block-01_oop-fundamentals/unit_testing_maven"},"next":{"title":"Enums, String, StringBuffer y StringBuilder","permalink":"/Object_Oriented_Programming_Intersemester/en/docs/block-01_oop-fundamentals/enums_string_stringbuffer"}}');var t=s(4848),i=s(8453),o=s(1470),a=s(9365);const l={sidebar_position:5},c="Constructores, Getters y Setters, toString",d={},u=[{value:"\xbfQu\xe9 es el Encapsulamiento?",id:"qu\xe9-es-el-encapsulamiento",level:2},{value:"\xbfQu\xe9 es un Constructor?",id:"qu\xe9-es-un-constructor",level:2},{value:"Diferencias clave con un m\xe9todo normal",id:"diferencias-clave-con-un-m\xe9todo-normal",level:3},{value:"Tipos de constructores",id:"tipos-de-constructores",level:3},{value:"Sobrecarga de constructores",id:"sobrecarga-de-constructores",level:3},{value:"Analog\xedas",id:"analog\xedas",level:3},{value:"Buenas pr\xe1cticas con constructores",id:"buenas-pr\xe1cticas-con-constructores",level:3},{value:"\xbfQu\xe9 son Getters y Setters?",id:"qu\xe9-son-getters-y-setters",level:2},{value:"\xbfPor qu\xe9 usar getters y setters?",id:"por-qu\xe9-usar-getters-y-setters",level:3},{value:"Estructura general",id:"estructura-general",level:3},{value:"Buenas Pr\xe1cticas con Getters y Setters",id:"buenas-pr\xe1cticas-con-getters-y-setters",level:3},{value:"\xbfQu\xe9 es el m\xe9todo <code>toString()</code>?",id:"qu\xe9-es-el-m\xe9todo-tostring",level:2},{value:"\xbfPor qu\xe9 es importante sobrescribir <code>toString()</code>?",id:"por-qu\xe9-es-importante-sobrescribir-tostring",level:3},{value:"Buenas Pr\xe1cticas con <code>toString()</code>",id:"buenas-pr\xe1cticas-con-tostring",level:3},{value:"C\xf3digo en Java",id:"c\xf3digo-en-java",level:2},{value:"Mini Proyecto",id:"mini-proyecto",level:2},{value:"Descripci\xf3n",id:"descripci\xf3n",level:3},{value:"Requisitos funcionales",id:"requisitos-funcionales",level:3},{value:"Reflexi\xf3n final",id:"reflexi\xf3n-final",level:2},{value:"Recursos y Bibliograf\xeda",id:"recursos-y-bibliograf\xeda",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"constructores-getters-y-setters-tostring",children:"Constructores, Getters y Setters, toString"})}),"\n",(0,t.jsx)(n.h2,{id:"qu\xe9-es-el-encapsulamiento",children:"\xbfQu\xe9 es el Encapsulamiento?"}),"\n",(0,t.jsxs)(n.p,{children:["Es uno de los ",(0,t.jsx)(n.strong,{children:"pilares fundamentales de la POO"})," y consiste en ",(0,t.jsx)(n.strong,{children:"proteger los datos internos de una clase"}),", haciendo que solo puedan ser accedidos o modificados a trav\xe9s de m\xe9todos controlados: los ",(0,t.jsx)(n.strong,{children:"getters"})," y ",(0,t.jsx)(n.strong,{children:"setters"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Esto permite:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Validar datos antes de asignarlos."}),"\n",(0,t.jsx)(n.li,{children:"Evitar accesos no deseados."}),"\n",(0,t.jsx)(n.li,{children:"Mantener el principio de ocultamiento de la informaci\xf3n."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"qu\xe9-es-un-constructor",children:"\xbfQu\xe9 es un Constructor?"}),"\n",(0,t.jsxs)(n.p,{children:["Un ",(0,t.jsx)(n.strong,{children:"constructor"})," es un m\xe9todo especial que ",(0,t.jsx)(n.strong,{children:"se ejecuta autom\xe1ticamente al crear un objeto"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Un constructor es un ",(0,t.jsx)(n.strong,{children:"m\xe9todo especial"})," que se llama autom\xe1ticamente cuando se crea un objeto de una clase. Su objetivo es ",(0,t.jsx)(n.strong,{children:"inicializar el estado (atributos)"})," del objeto."]}),"\n",(0,t.jsx)(n.h3,{id:"diferencias-clave-con-un-m\xe9todo-normal",children:"Diferencias clave con un m\xe9todo normal"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Caracter\xedstica"}),(0,t.jsx)(n.th,{children:"Constructor"}),(0,t.jsx)(n.th,{children:"M\xe9todo normal"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Tiene nombre de la clase"}),(0,t.jsx)(n.td,{children:"S\xed"}),(0,t.jsx)(n.td,{children:"No necesariamente"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Tiene tipo de retorno"}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsxs)(n.td,{children:["S\xed (puede ser ",(0,t.jsx)(n.code,{children:"void"})," o cualquier tipo)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Se invoca autom\xe1ticamente"}),(0,t.jsxs)(n.td,{children:["Al usar ",(0,t.jsx)(n.code,{children:"new"})]}),(0,t.jsx)(n.td,{children:"Manualmente"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"tipos-de-constructores",children:"Tipos de constructores"}),"\n",(0,t.jsx)(n.p,{children:"Existen 3 tipos:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Constructor ",(0,t.jsx)(n.strong,{children:"impl\xedcito"}),": Si no defines ning\xfan constructor, Java crea uno autom\xe1ticamente ",(0,t.jsx)(n.strong,{children:"sin par\xe1metros"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Book {\n    private String title;\n    // Java genera autom\xe1ticamente: public Book() {}\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Constructor ",(0,t.jsx)(n.strong,{children:"vac\xedo"}),": T\xfa mismo defines un constructor sin par\xe1metros. Se usa cuando quieres permitir la creaci\xf3n del objeto ",(0,t.jsx)(n.strong,{children:"sin establecer valores de inmediato"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Book  {\n    // puedes dejarlo vac\xedo o incluir un mensaje\n   public Book() {}\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Constructor ",(0,t.jsx)(n.strong,{children:"con par\xe1metros"}),": Permite inicializar el objeto directamente con ",(0,t.jsx)(n.strong,{children:"datos personalizados"}),", evitando llamadas repetidas a setters."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Book {\n   public Book(String title, String author) {\n       this.title = title;\n       this.author = author;\n   }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"sobrecarga-de-constructores",children:"Sobrecarga de constructores"}),"\n",(0,t.jsxs)(n.p,{children:["Puedes definir ",(0,t.jsx)(n.strong,{children:"varios constructores"})," con diferente n\xfamero o tipo de par\xe1metros. Esto se llama ",(0,t.jsx)(n.strong,{children:"overloading"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Book {\n    private String title;\n    private String author;\n\n    public Book() {\n        this.title = "Unknown";\n        this.author = "Anonymous";\n    }\n\n    public Book(String title) {\n        this.title = title;\n        this.author = "Anonymous";\n    }\n\n    public Book(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"As\xed puedes crear libros de diferentes formas:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Book a = new Book(); // Sin datos\nBook b = new Book("1984"); // Solo t\xedtulo\nBook c = new Book("1984", "Orwell"); // T\xedtulo y autor\n'})}),"\n",(0,t.jsx)(n.h3,{id:"analog\xedas",children:"Analog\xedas"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Constructor como la receta inicial:"})," El constructor es la ",(0,t.jsx)(n.strong,{children:"receta b\xe1sica"})," para preparar un objeto. Si no dices nada (constructor vac\xedo), te entrega la versi\xf3n por defecto. Si das par\xe1metros, creas una versi\xf3n personalizada."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Constructor como el formulario de inscripci\xf3n:"})," Cuando un estudiante se matricula en la universidad (se construye un objeto ",(0,t.jsx)(n.code,{children:"Student"}),"), debe llenar un formulario con su nombre, ID, y programa acad\xe9mico. Ese formulario es el constructor: establece sus datos desde el principio."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"buenas-pr\xe1cticas-con-constructores",children:"Buenas pr\xe1cticas con constructores"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Recomendaci\xf3n"}),(0,t.jsx)(n.th,{children:"Explicaci\xf3n"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Usa ",(0,t.jsx)(n.code,{children:"this"})]}),(0,t.jsx)(n.td,{children:"Para distinguir entre atributos y par\xe1metros con el mismo nombre"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Aplica sobrecarga"}),(0,t.jsx)(n.td,{children:"Da flexibilidad a quienes usan la clase"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Valida datos"}),(0,t.jsxs)(n.td,{children:["Puedes validar valores en el constructor (ej. ",(0,t.jsx)(n.code,{children:"gpa >= 0"}),")"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Mant\xe9n la clase coherente"}),(0,t.jsx)(n.td,{children:"Un constructor debe dejar el objeto en un estado v\xe1lido"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"qu\xe9-son-getters-y-setters",children:"\xbfQu\xe9 son Getters y Setters?"}),"\n",(0,t.jsxs)(n.p,{children:["Son m\xe9todos p\xfablicos que permiten ",(0,t.jsx)(n.strong,{children:"leer (get)"})," y ",(0,t.jsx)(n.strong,{children:"modificar (set)"})," los atributos privados."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getName()"})," \u2192 devuelve el valor del nombre."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'setName("David")'})," \u2192 asigna un nuevo valor."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Esto permite aplicar el principio ",(0,t.jsx)(n.strong,{children:'"acceso controlado"'}),", \xfatil para validaciones."]}),"\n",(0,t.jsxs)(n.p,{children:["En Java, los ",(0,t.jsx)(n.strong,{children:"getters"})," y ",(0,t.jsx)(n.strong,{children:"setters"})," son ",(0,t.jsx)(n.strong,{children:"m\xe9todos p\xfablicos"})," que permiten acceder y modificar los atributos ",(0,t.jsx)(n.strong,{children:"privados"})," de una clase, siguiendo el principio de ",(0,t.jsx)(n.strong,{children:"encapsulamiento"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"por-qu\xe9-usar-getters-y-setters",children:"\xbfPor qu\xe9 usar getters y setters?"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Motivo"}),(0,t.jsx)(n.th,{children:"Beneficio"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Encapsular el estado"}),(0,t.jsx)(n.td,{children:"Controla el acceso directo a los atributos"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Validar antes de asignar"}),(0,t.jsx)(n.td,{children:"Permite comprobar o transformar datos antes de guardarlos"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Ocultar implementaci\xf3n"}),(0,t.jsx)(n.td,{children:"Puedes cambiar c\xf3mo funciona internamente sin afectar al exterior"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Reforzar mantenibilidad"}),(0,t.jsx)(n.td,{children:"Facilita el mantenimiento y crecimiento del sistema"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"estructura-general",children:"Estructura general"}),"\n",(0,t.jsxs)(n.p,{children:["La convenci\xf3n en Java es que los m\xe9todos ",(0,t.jsx)(n.code,{children:"getX()"})," y ",(0,t.jsx)(n.code,{children:"setX()"})," usen el mismo nombre del atributo, con la primera letra en may\xfascula."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"private String name;\n\npublic String getName() {\n    return name;\n}\n\npublic void setName(String name) {\n    this.name = name;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"buenas-pr\xe1cticas-con-getters-y-setters",children:"Buenas Pr\xe1cticas con Getters y Setters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Pr\xe1ctica"}),(0,t.jsx)(n.th,{children:"Explicaci\xf3n"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Validar datos en ",(0,t.jsx)(n.code,{children:"setX()"})]}),(0,t.jsx)(n.td,{children:"Evita estados incorrectos del objeto"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["No uses ",(0,t.jsx)(n.code,{children:"getX()"})," innecesarios"]}),(0,t.jsx)(n.td,{children:"Solo para atributos relevantes al exterior"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"getX()"})," nunca modifica"]}),(0,t.jsx)(n.td,{children:"Nunca debe alterar el estado, solo devolver informaci\xf3n"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Usa ",(0,t.jsx)(n.code,{children:"boolean isActive()"})]}),(0,t.jsxs)(n.td,{children:["Para atributos booleanos, usar ",(0,t.jsx)(n.code,{children:"isX()"})," en vez de ",(0,t.jsx)(n.code,{children:"getX()"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["An\xf3talos con ",(0,t.jsx)(n.code,{children:"@Override"})," si corresponde"]}),(0,t.jsx)(n.td,{children:"Si est\xe1s sobrescribiendo un m\xe9todo existente"})]})]})]}),"\n",(0,t.jsxs)(n.h2,{id:"qu\xe9-es-el-m\xe9todo-tostring",children:["\xbfQu\xe9 es el m\xe9todo ",(0,t.jsx)(n.code,{children:"toString()"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:["Es un m\xe9todo especial ",(0,t.jsx)(n.strong,{children:"heredado de la clase"})," ",(0,t.jsx)(n.code,{children:"Object"})," que sirve para devolver una ",(0,t.jsx)(n.strong,{children:"representaci\xf3n en texto"})," de un objeto. Por defecto, devuelve algo como:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"Student@3e25a5\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Esto es poco \xfatil. Por eso, es una pr\xe1ctica com\xfan sobrescribirlo (",(0,t.jsx)(n.code,{children:"@Override"}),") para mostrar informaci\xf3n legible y significativa del objeto."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'//highlight-next-line\n@Override // Se usa el decorador para sobrescribir el m\xe9todo\npublic String toString() {\n    return name + " (" + id + ")";\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"por-qu\xe9-es-importante-sobrescribir-tostring",children:["\xbfPor qu\xe9 es importante sobrescribir ",(0,t.jsx)(n.code,{children:"toString()"}),"?"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Beneficio"}),(0,t.jsx)(n.th,{children:"Descripci\xf3n"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Facilita depuraci\xf3n"}),(0,t.jsx)(n.td,{children:"Ver claramente los valores internos al imprimir el objeto"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Mejora trazabilidad"}),(0,t.jsxs)(n.td,{children:["Permite entender qu\xe9 contiene una colecci\xf3n de objetos (como ",(0,t.jsx)(n.code,{children:"ArrayList"}),")"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"\xdatil para logs o exportaci\xf3n"}),(0,t.jsx)(n.td,{children:"Proporciona salida legible para archivos, reportes o visualizaci\xf3n en GUI"})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"buenas-pr\xe1cticas-con-tostring",children:["Buenas Pr\xe1cticas con ",(0,t.jsx)(n.code,{children:"toString()"})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Pr\xe1ctica"}),(0,t.jsx)(n.th,{children:"Explicaci\xf3n"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Sobrescribir siempre"}),(0,t.jsxs)(n.td,{children:["Para evitar la salida gen\xe9rica de ",(0,t.jsx)(n.code,{children:"Object"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Mostrar solo lo necesario"}),(0,t.jsx)(n.td,{children:"Evita imprimir datos sensibles (contrase\xf1as, tokens\u2026)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Usar ",(0,t.jsx)(n.code,{children:"@Override"})]}),(0,t.jsx)(n.td,{children:"Para dejar claro que est\xe1s reemplazando el m\xe9todo heredado"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["\xdasalo en m\xe9todos ",(0,t.jsx)(n.code,{children:"System.out.println()"})]}),(0,t.jsx)(n.td,{children:"...y en logs o visualizaciones autom\xe1ticas de objetos"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Usa un formato uniforme"}),(0,t.jsx)(n.td,{children:"Para facilitar la lectura e integraci\xf3n con otras herramientas"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"c\xf3digo-en-java",children:"C\xf3digo en Java"}),"\n","\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"diagrama",label:"Diagrama de Clases",children:(0,t.jsx)(n.mermaid,{value:"classDiagram\n    class Student {\n        - String name\n        - String id\n        - double gpa\n        + Student(String, String, double)\n        + String getName()\n        + void setName(String)\n        + String getId()\n        + void setId(String)\n        + double getGpa()\n        + void setGpa(double)\n        + String toString()\n    }\n\n    class StudentTest {\n        <<Test>>\n        + void testConstructorAndToString()\n        + void testValidSetters()\n        + void testInvalidGpaNotSet()\n        + void testToStringFormat()\n    }\n\n    StudentTest --\x3e Student : test"})}),(0,t.jsx)(a.A,{value:"java1",label:"Clase Student",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\n\n/**\n * Represents a student with basic academic information.\n */\npublic class Student {\n    private String name;\n    private String id;\n    private double gpa;\n\n    /**\n     * Default constructor.\n     */\n    public Student() {}\n\n    /**\n     * Constructs a student with all required fields.\n     * @param name Full name of the student.\n     * @param id Student ID code.\n     * @param gpa Grade point average (0.0 - 5.0).\n     */\n    public Student(String name, String id, double gpa) {\n        this.name = name;\n        this.id = id;\n        this.gpa = gpa;\n    }\n\n    /** Returns the student name. */\n    public String getName() { return name; }\n\n    /** Sets the student name. */\n    public void setName(String name) {\n        if (name != null && !name.isBlank()) {\n            this.name = name;\n        }\n    }\n\n    /** Returns the student ID. */\n    public String getId() { return id; }\n\n    /** Sets the student ID. */\n    public void setId(String id) { this.id = id; }\n\n    /** Returns the student\'s GPA. */\n    public double getGpa() { return gpa; }\n\n    /** Sets the GPA, ensuring it\'s within valid range. */\n    public void setGpa(double gpa) {\n        if (gpa >= 0.0 && gpa <= 5.0) {\n            this.gpa = gpa;\n        }\n    }\n\n    /** Returns a text representation of the student. */\n    @Override\n    public String toString() {\n        return "Student{name=\'" + name + "\', id=\'" + id + "\', gpa=" + gpa + "}";\n    }\n}\n'})})}),(0,t.jsx)(a.A,{value:"java2",label:"Test Unitarios",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StudentTest {\n\n    @Test\n    void testConstructorAndToString() {\n        Student s = new Student("Carlos", "U123", 4.5);\n        assertEquals("Carlos", s.getName());\n        assertEquals("U123", s.getId());\n        assertEquals(4.5, s.getGpa());\n        assertTrue(s.toString().contains("Carlos"));\n    }\n\n    @Test\n    void testValidSetters() {\n        Student s = new Student();\n        s.setName("Luc\xeda");\n        s.setGpa(4.7);\n        assertEquals("Luc\xeda", s.getName());\n        assertEquals(4.7, s.getGpa());\n    }\n\n    @Test\n    void testInvalidGpaNotSet() {\n        Student s = new Student();\n        s.setGpa(6.0); // Invalid\n        assertEquals(0.0, s.getGpa()); // default remains\n    }\n\n    @Test\n    void testToStringFormat() {\n        Student s = new Student("Ana", "S001", 4.2);\n        String expected = "Student{name=\'Ana\', id=\'S001\', gpa=4.2}";\n        assertEquals(expected, s.toString());\n    }\n}\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"mini-proyecto",children:"Mini Proyecto"}),"\n",(0,t.jsx)(n.h3,{id:"descripci\xf3n",children:"Descripci\xf3n"}),"\n",(0,t.jsx)(n.p,{children:"Desarrolla un peque\xf1o sistema en consola que permita:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Crear objetos de tipo ",(0,t.jsx)(n.code,{children:"Product"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Usar un constructor con par\xe1metros."}),"\n",(0,t.jsx)(n.li,{children:"Utilizar getters y setters para acceder y modificar sus atributos."}),"\n",(0,t.jsxs)(n.li,{children:["Imprimir la informaci\xf3n de los productos usando ",(0,t.jsx)(n.code,{children:"toString()"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Almacenar varios productos en un ",(0,t.jsx)(n.code,{children:"ArrayList"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"requisitos-funcionales",children:"Requisitos funcionales"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Crear una clase ",(0,t.jsx)(n.code,{children:"Product"})," con los siguientes atributos:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"String name"}),"\n",(0,t.jsx)(n.li,{children:"String code"}),"\n",(0,t.jsx)(n.li,{children:"double price"}),"\n",(0,t.jsx)(n.li,{children:"int quantity"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Implementar:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Un constructor vac\xedo y uno con todos los par\xe1metros."}),"\n",(0,t.jsx)(n.li,{children:"Getters y Setters para cada atributo."}),"\n",(0,t.jsx)(n.li,{children:"M\xe9todo sobrescrito toString() para mostrar la informaci\xf3n del producto."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["En el m\xe9todo main:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Crear al menos 5 productos y almacenarlos en una lista."}),"\n",(0,t.jsx)(n.li,{children:"Modificar al menos un producto con setters."}),"\n",(0,t.jsx)(n.li,{children:"Imprimir la informaci\xf3n de todos los productos con un bucle usando toString()."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"reflexi\xf3n-final",children:"Reflexi\xf3n final"}),"\n",(0,t.jsx)(n.p,{children:"Principios SOLID aplicados a los constructores:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"S (Single Responsibility)"}),": Cada constructor tiene una \xfanica funci\xf3n: inicializar el objeto correctamente."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"O (Open/Closed)"}),": Puedes agregar nuevos constructores sin modificar los anteriores."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"L (Liskov Substitution)"}),": En clases hijas, puedes invocar ",(0,t.jsx)(n.code,{children:"super()"})," para llamar al constructor de la superclase."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Principios SOLID aplicados a los getters y setters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"S (Single Responsibility)"}),": Acceso y modificaci\xf3n controlada del estado del objeto"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"O (Open/Closed)"}),": Se pueden agregar nuevas validaciones sin afectar usuarios externos"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"L (Liskov Substitution)"}),": Clases hijas pueden sobrescribir getters/setters sin romper compatibilidad"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Principios SOLID aplicados al ",(0,t.jsx)(n.code,{children:"toString()"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"S (Single Responsibility)"}),": ",(0,t.jsx)(n.code,{children:"toString()"})," solo debe mostrar el estado del objeto como texto"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"O (Open/Closed)"}),": Puedes extender la clase y redefinir ",(0,t.jsx)(n.code,{children:"toString()"})," seg\xfan el nuevo contexto"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"L (Liskov Substitution)"}),": Cualquier subclase puede usar su propia versi\xf3n de ",(0,t.jsx)(n.code,{children:"toString()"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"recursos-y-bibliograf\xeda",children:"Recursos y Bibliograf\xeda"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Oracle. (2024). ",(0,t.jsx)(n.a,{href:"https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html",children:"Java Constructors"})]}),"\n",(0,t.jsxs)(n.li,{children:["Oracle. (2024). ",(0,t.jsx)(n.a,{href:"https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html",children:"Encapsulation and Accessor Methods"})]}),"\n",(0,t.jsxs)(n.li,{children:["Oracle. (2024). ",(0,t.jsx)(n.a,{href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--",children:"toString() Method Documentation"})]}),"\n",(0,t.jsx)(n.li,{children:"Horstmann, C. S. (2020). Core Java Volume I \u2013 Fundamentals. Pearson."}),"\n",(0,t.jsxs)(n.li,{children:["Baeldung. (2023). ",(0,t.jsx)(n.a,{href:"https://www.baeldung.com/java-constructors",children:"Guide to Constructors in Java"})]}),"\n",(0,t.jsxs)(n.li,{children:["Baeldung. (2023). ",(0,t.jsx)(n.a,{href:"https://www.baeldung.com/java-tostring",children:"Guide to Java toString()"})]}),"\n"]})]})}function j(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);