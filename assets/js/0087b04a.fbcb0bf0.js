"use strict";(self.webpackChunkobject_oriented_programming=self.webpackChunkobject_oriented_programming||[]).push([[451],{6992:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"block-02_interfaces-maping-dao/mapping_objects_creation","title":"Mapeo y Creaci\xf3n de Objetos","description":"En programaci\xf3n orientada a objetos, una pr\xe1ctica com\xfan es mapear una tabla de base de datos a una clase Java. Este proceso se conoce como mapeo objeto-relacional (ORM b\xe1sico - basic Object-Relation Mapping), y permite representar registros como objetos y columnas como atributos.","source":"@site/docs/block-02_interfaces-maping-dao/02_mapping_objects_creation.md","sourceDirName":"block-02_interfaces-maping-dao","slug":"/block-02_interfaces-maping-dao/mapping_objects_creation","permalink":"/Object_Oriented_Programming_Intersemester/docs/block-02_interfaces-maping-dao/mapping_objects_creation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/block-02_interfaces-maping-dao/02_mapping_objects_creation.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Git y Github para estudiantes de Ingenier\xeda","permalink":"/Object_Oriented_Programming_Intersemester/docs/block-02_interfaces-maping-dao/git_and_github"}}');var r=a(4848),i=a(8453);const o={sidebar_position:2},t="Mapeo y Creaci\xf3n de Objetos",c={},l=[{value:"\xbfPor qu\xe9 es importante?",id:"por-qu\xe9-es-importante",level:2},{value:"Relaci\xf3n tabla - clase",id:"relaci\xf3n-tabla---clase",level:2},{value:"Tipos de mapeo comunes",id:"tipos-de-mapeo-comunes",level:2},{value:"Mapeo manual vs autom\xe1tico",id:"mapeo-manual-vs-autom\xe1tico",level:2},{value:"Buenas pr\xe1cticas al mapear manualmente",id:"buenas-pr\xe1cticas-al-mapear-manualmente",level:2},{value:"Flujo de mapeo manual",id:"flujo-de-mapeo-manual",level:2},{value:"Ejemplo de c\xf3digo Java",id:"ejemplo-de-c\xf3digo-java",level:2},{value:"Creaci\xf3n de Objetos",id:"creaci\xf3n-de-objetos",level:2},{value:"Reflexi\xf3n final",id:"reflexi\xf3n-final",level:2},{value:"Aplicaci\xf3n pr\xe1ctica",id:"aplicaci\xf3n-pr\xe1ctica",level:2},{value:"Referencias",id:"referencias",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mapeo-y-creaci\xf3n-de-objetos",children:"Mapeo y Creaci\xf3n de Objetos"})}),"\n",(0,r.jsxs)(n.p,{children:["En programaci\xf3n orientada a objetos, una pr\xe1ctica com\xfan es ",(0,r.jsx)(n.strong,{children:"mapear una tabla de base de datos a una clase Java"}),". Este proceso se conoce como ",(0,r.jsx)(n.strong,{children:"mapeo objeto-relacional (ORM b\xe1sico - basic Object-Relation Mapping)"}),", y permite representar registros como objetos y columnas como atributos."]}),"\n",(0,r.jsx)(n.p,{children:"Por ejemplo:"}),"\n",(0,r.jsxs)(n.p,{children:["Tabla ",(0,r.jsx)(n.code,{children:"products"})," \u2192 Clase ",(0,r.jsx)(n.code,{children:"Product"}),"\nColumna ",(0,r.jsx)(n.code,{children:"price"})," \u2192 atributo ",(0,r.jsx)(n.code,{children:"private double price"})]}),"\n",(0,r.jsxs)(n.p,{children:["Este concepto es la base de herramientas como ",(0,r.jsx)(n.strong,{children:"Hibernate"}),", pero aqu\xed lo abordamos manualmente para entender los fundamentos."]}),"\n",(0,r.jsx)(n.h2,{id:"por-qu\xe9-es-importante",children:"\xbfPor qu\xe9 es importante?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Separa la l\xf3gica de negocio de la persistencia de datos"}),"\n",(0,r.jsx)(n.li,{children:"Facilita la lectura y mantenimiento del c\xf3digo"}),"\n",(0,r.jsx)(n.li,{children:"Es la base de herramientas profesionales como Hibernate, JPA y Spring Data"}),"\n",(0,r.jsx)(n.li,{children:"Permite simular acceso a datos en proyectos sin usar a\xfan una base de datos real"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"relaci\xf3n-tabla---clase",children:"Relaci\xf3n tabla - clase"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Elemento de la base de datos"}),(0,r.jsx)(n.th,{children:"Elemento en Java"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Fila (registro)"}),(0,r.jsx)(n.td,{children:"Objeto"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Columna"}),(0,r.jsx)(n.td,{children:"Atributo de clase"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Tabla"}),(0,r.jsx)(n.td,{children:"Clase POJO"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Relaciones"}),(0,r.jsx)(n.td,{children:"Atributos tipo objeto o lista"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"tipos-de-mapeo-comunes",children:"Tipos de mapeo comunes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mapeo simple"})," (una tabla \u2194 una clase)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Relaciones uno a muchos"})," (ej. Cliente \u2192 muchos pedidos)}"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Relaciones muchos a muchos"})," (ej. Cursos \u2194 Estudiantes con intermedia ",(0,r.jsx)(n.code,{children:"Enrollment"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Mapeo con enum (ej. status como ",(0,r.jsx)(n.code,{children:"ACTIVE"}),", ",(0,r.jsx)(n.code,{children:"DROPPED"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"mapeo-manual-vs-autom\xe1tico",children:"Mapeo manual vs autom\xe1tico"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Mapeo manual (POJO)"}),(0,r.jsx)(n.th,{children:"Mapeo autom\xe1tico (ORM)"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"C\xf3digo escrito a mano"}),(0,r.jsx)(n.td,{children:"Herramientas como Hibernate"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Ideal para aprender y practicar"}),(0,r.jsx)(n.td,{children:"Ideal para proyectos grandes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Control total del dise\xf1o"}),(0,r.jsx)(n.td,{children:"Automatiza validaci\xf3n, inserci\xf3n"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"buenas-pr\xe1cticas-al-mapear-manualmente",children:"Buenas pr\xe1cticas al mapear manualmente"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Usa encapsulamiento (",(0,r.jsx)(n.code,{children:"private"})," + getters/setters)"]}),"\n",(0,r.jsxs)(n.li,{children:["Implementa ",(0,r.jsx)(n.code,{children:"toString()"})," para visualizar objetos"]}),"\n",(0,r.jsxs)(n.li,{children:["Utiliza ",(0,r.jsx)(n.strong,{children:"constructores sobrecargados"})]}),"\n",(0,r.jsx)(n.li,{children:"Representa relaciones entre clases con objetos u listas"}),"\n",(0,r.jsx)(n.li,{children:"Aplica enum cuando una columna tiene valores fijos"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"flujo-de-mapeo-manual",children:"Flujo de mapeo manual"}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart TD\n    A[Inicio] --\x3e B[Analizo la tabla]\n    B --\x3e C[Creo una clase con los mismos atributos]\n    C --\x3e D[Defino los tipos de datos equivalentes]\n    D --\x3e E[Creo objetos simulando los registros]\n    E --\x3e F{\xbfDeseo organizar en capas?}\n    F -- S\xed --\x3e G["Organizo la l\xf3gica en capas \\(DAO, Service, UI\\)"]\n    F -- No --\x3e H["Uso la l\xf3gica directamente en main\\(\\)"]\n    G --\x3e I[Fin]\n    H --\x3e I[Fin]'}),"\n",(0,r.jsx)(n.h2,{id:"ejemplo-de-c\xf3digo-java",children:"Ejemplo de c\xf3digo Java"}),"\n",(0,r.jsx)(n.p,{children:"Imagina que tienes una base de datos con la siguiente tabla:"}),"\n",(0,r.jsx)(n.mermaid,{value:"erDiagram\n    PRODUCT {\n        INT id PK\n        STRING name\n        DOUBLE price\n        STRING category\n    }"}),"\n",(0,r.jsx)(n.p,{children:"El siguiente paso ser\xeda bosquejar nuestro proyecto para que pueda trabajar correctamente con la base de datos, y adicionar servicios y funciones que nos pide el cliente:"}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n    direction TB\n\n    class Product {\n        - int id\n        - String name\n        - double price\n        - String category\n        + Product()\n        + Product(int, String, double, String)\n        + int getId()\n        + void setId(int)\n        + String getName()\n        + void setName(String)\n        + double getPrice()\n        + void setPrice(double)\n        + String getCategory()\n        + void setCategory(String)\n        + String toString()\n    }\n\n    class ProductRepository {\n        + List~Product~ loadMockProducts()\n    }\n\n    class ProductManager {\n        + void main(String[] args)\n    }\n\n    class ProductTest {\n        <<Test>>\n        + void testProductCreation()\n        + void testToString()\n    }\n\n    ProductRepository --\x3e Product : uses\n    ProductManager --\x3e ProductRepository : uses\n    ProductManager --\x3e Product : uses\n    ProductTest --\x3e Product : tests"}),"\n",(0,r.jsx)(n.p,{children:"Creado el diagrama de clases, podemos pasar a mapear el producto en una clase, tambi\xe9n lo podemos llamar entidad o modelo."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'/**\n * Represents a product in an inventory system.\n */\npublic class Product {\n    private int id;\n    private String name;\n    private double price;\n    private String category;\n\n    /** Empty constructor */\n    public Product() {}\n\n    /** Full constructor */\n    public Product(int id, String name, double price, String category) {\n        this.id = id;\n        this.name = name;\n        this.price = price;\n        this.category = category;\n    }\n\n    // Getters and setters\n    public int getId() { return id; }\n    public void setId(int id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public double getPrice() { return price; }\n    public void setPrice(double price) { this.price = price; }\n\n    public String getCategory() { return category; }\n    public void setCategory(String category) { this.category = category; }\n\n    @Override\n    public String toString() {\n        return "Product [id=" + id + ", name=" + name +\n               ", price=" + price + ", category=" + category + "]";\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Otro paso es simular un repositorio de datos, para esto podemos crear un arreglo con productos ficticios que luego podemos cargar."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Simulates a data source for products.\n */\npublic class ProductRepository {\n\n    public List<Product> loadMockProducts() {\n        List<Product> products = new ArrayList<>();\n        products.add(new Product(1, "Laptop", 4200.0, "Electronics"));\n        products.add(new Product(2, "Notebook", 8.5, "Stationery"));\n        products.add(new Product(3, "Coffee", 12.0, "Food"));\n        return products;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Por \xfaltimo comprobamos a traves de los test que nuestro c\xf3digo funciona correctamente."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ProductTest {\n    @Test\n    void testProductCreation() {\n        Product p = new Product(1, "Mouse", 25.0, "Electronics");\n        assertEquals("Mouse", p.getName());\n        assertEquals(25.0, p.getPrice());\n    }\n\n    @Test\n    void testToString() {\n        Product p = new Product(2, "Pen", 1.5, "Stationery");\n        String output = p.toString();\n        assertTrue(output.contains("Pen"));\n        assertTrue(output.contains("Stationery"));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"creaci\xf3n-de-objetos",children:"Creaci\xf3n de Objetos"}),"\n",(0,r.jsxs)(n.p,{children:["En Java, ",(0,r.jsx)(n.strong,{children:"un objeto"})," es una instancia concreta de una clase."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Una ",(0,r.jsx)(n.strong,{children:"clase"})," es como un plano o molde (ej. una receta), mientras que un ",(0,r.jsx)(n.strong,{children:"objeto"})," es la cosa real que puedes usar (ej. el pastel)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Cuando defines una clase como ",(0,r.jsx)(n.code,{children:"Product"}),", ",(0,r.jsx)(n.strong,{children:"no est\xe1s creando"})," un estudiante a\xfan; solo describes c\xf3mo ser\xe1. Cuando haces ",(0,r.jsx)(n.code,{children:"Product p = new Product()"}),", ",(0,r.jsx)(n.strong,{children:"ah\xed nace el objeto"}),", con memoria real, valores y comportamiento propios. Esto implica:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Se reserva memoria para el nuevo objeto."}),"\n",(0,r.jsx)(n.li,{children:"Se llama al constructor que inicializa los atributos."}),"\n",(0,r.jsxs)(n.li,{children:["Se asigna la referencia del objeto a la variable ",(0,r.jsx)(n.code,{children:"p"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"reflexi\xf3n-final",children:"Reflexi\xf3n final"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Se aplic\xf3 el principio ",(0,r.jsx)(n.em,{children:"SRP (Single Responsibility)"}),": ",(0,r.jsx)(n.code,{children:"Product"})," solo modela datos, ",(0,r.jsx)(n.code,{children:"ProductRepository"})," simula la carga, ",(0,r.jsx)(n.code,{children:"ProductManager"})," maneja la l\xf3gica de impresi\xf3n."]}),"\n",(0,r.jsxs)(n.li,{children:["No se aplic\xf3 DAO completamente a\xfan, ",(0,r.jsx)(n.strong,{children:"pero ya se separan las responsabilidades"}),", lo que prepara el terreno para el patr\xf3n DAO completo."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"aplicaci\xf3n-pr\xe1ctica",children:"Aplicaci\xf3n pr\xe1ctica"}),"\n",(0,r.jsx)(n.p,{children:"Este enfoque de mapeo es \xfatil para:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sistemas de inventario (tiendas, almacenes, bibliotecas)"}),"\n",(0,r.jsx)(n.li,{children:"CRM (clientes como objetos)"}),"\n",(0,r.jsx)(n.li,{children:"Plataformas educativas (materias, cursos, estudiantes)"}),"\n",(0,r.jsx)(n.li,{children:"Videojuegos (\xedtems como objetos)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Oracle. (2023). ",(0,r.jsx)(n.a,{href:"https://docs.oracle.com/javase/tutorial/java/javaOO/classes.html",children:"Java Classes & Objects"})]}),"\n",(0,r.jsx)(n.li,{children:"Horstmann, C. (2020). Core Java Volume I (11th ed.). Pearson."}),"\n",(0,r.jsxs)(n.li,{children:["Baeldung. (2023). ",(0,r.jsx)(n.a,{href:"https://www.baeldung.com/java-dto-pattern",children:"Java Data Transfer Objects"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);