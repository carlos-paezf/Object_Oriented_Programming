"use strict";(self.webpackChunkobject_oriented_programming=self.webpackChunkobject_oriented_programming||[]).push([[3432],{307:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"block-01_oop-fundamentals/OOP-introduction","title":"Introducci\xf3n a la Programaci\xf3n Orientada a Objetos","description":"La Programaci\xf3n Orientada a Objetos (POO) es un paradigma que organiza el software como una colecci\xf3n de objetos que interact\xfaan entre s\xed. Cada objeto es una instancia de una clase, que act\xfaa como plantilla para definir sus atributos (estado) y m\xe9todos (comportamiento).","source":"@site/docs/block-01_oop-fundamentals/02_OOP-introduction.md","sourceDirName":"block-01_oop-fundamentals","slug":"/block-01_oop-fundamentals/OOP-introduction","permalink":"/Object_Oriented_Programming_Intersemester/docs/block-01_oop-fundamentals/OOP-introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/block-01_oop-fundamentals/02_OOP-introduction.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Conceptos Base","permalink":"/Object_Oriented_Programming_Intersemester/docs/block-01_oop-fundamentals/basic-concepts"},"next":{"title":"POJO y UML B\xe1sico","permalink":"/Object_Oriented_Programming_Intersemester/docs/block-01_oop-fundamentals/POJO_UML_basic"}}');var s=a(4848),r=a(8453),o=a(1470),t=a(9365);const l={sidebar_position:2},c="Introducci\xf3n a la Programaci\xf3n Orientada a Objetos",d={},m=[{value:"Pilares de la Programaci\xf3n Orientada a Objetos",id:"pilares-de-la-programaci\xf3n-orientada-a-objetos",level:2},{value:"Encapsulamiento",id:"encapsulamiento",level:3},{value:"Abstracci\xf3n",id:"abstracci\xf3n",level:3},{value:"Herencia",id:"herencia",level:3},{value:"Polimorfismo",id:"polimorfismo",level:3},{value:"C\xf3digo en Java de Pilares de POO",id:"c\xf3digo-en-java-de-pilares-de-poo",level:3},{value:"Ejemplo b\xe1sico: Encapsulamiento y Abstracci\xf3n",id:"ejemplo-b\xe1sico-encapsulamiento-y-abstracci\xf3n",level:4},{value:"Ejemplo intermedio: Herencia y Polimorfismo",id:"ejemplo-intermedio-herencia-y-polimorfismo",level:4},{value:"Mini proyecto: Sistema de Gesti\xf3n de Animales",id:"mini-proyecto-sistema-de-gesti\xf3n-de-animales",level:3},{value:"Reflexi\xf3n final de Conceptos Base",id:"reflexi\xf3n-final-de-conceptos-base",level:3},{value:"Aplicaci\xf3n pr\xe1ctica",id:"aplicaci\xf3n-pr\xe1ctica",level:3},{value:"Recursos y Bibliograf\xeda",id:"recursos-y-bibliograf\xeda",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"introducci\xf3n-a-la-programaci\xf3n-orientada-a-objetos",children:"Introducci\xf3n a la Programaci\xf3n Orientada a Objetos"})}),"\n",(0,s.jsxs)(n.p,{children:["La ",(0,s.jsx)(n.strong,{children:"Programaci\xf3n Orientada a Objetos (POO)"})," es un paradigma que organiza el software como una colecci\xf3n de ",(0,s.jsx)(n.strong,{children:"objetos"})," que interact\xfaan entre s\xed. Cada objeto es una ",(0,s.jsx)(n.strong,{children:"instancia de una clase"}),", que act\xfaa como plantilla para definir sus atributos (estado) y m\xe9todos (comportamiento)."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"\u201cPensar en objetos es similar a c\xf3mo percibimos el mundo: un carro, una persona o una cuenta bancaria tienen caracter\xedsticas propias y comportamientos definidos\u201d."})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pilares-de-la-programaci\xf3n-orientada-a-objetos",children:"Pilares de la Programaci\xf3n Orientada a Objetos"}),"\n",(0,s.jsx)(n.p,{children:"Los cuatro pilares fundamentales de la Programaci\xf3n Orientada a Objetos son principios que permiten crear sistemas modulares, reutilizables y mantenibles. Cada uno aporta un enfoque estructurado para modelar el comportamiento y las relaciones de los objetos."}),"\n",(0,s.jsx)(n.h3,{id:"encapsulamiento",children:"Encapsulamiento"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Definici\xf3n:"})," Consiste en ",(0,s.jsx)(n.strong,{children:"ocultar los detalles"})," internos de un objeto, exponiendo solo lo necesario mediante m\xe9todos p\xfablicos. Protege el estado interno del objeto."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Ejemplo real:"})," Un cajero autom\xe1tico oculta su l\xf3gica interna. T\xfa solo usas su interfaz (pantalla y botones)."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Beneficio:"})," Reduce el acoplamiento y permite cambiar la implementaci\xf3n sin afectar el exterior."]}),"\n",(0,s.jsx)(n.h3,{id:"abstracci\xf3n",children:"Abstracci\xf3n"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Definici\xf3n:"})," Se refiere a ",(0,s.jsx)(n.strong,{children:"mostrar solo lo relevante"})," del objeto, ocultando los detalles innecesarios para el usuario."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Ejemplo real:"})," Para conducir un carro no necesitas saber c\xf3mo funciona el motor; solo usas el volante y los pedales."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Beneficio:"})," Permite enfocarse en lo esencial del problema, facilitando el dise\xf1o y entendimiento del sistema."]}),"\n",(0,s.jsx)(n.h3,{id:"herencia",children:"Herencia"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Definici\xf3n:"})," Permite que una clase (subclase) ",(0,s.jsx)(n.strong,{children:"herede atributos y m\xe9todos"})," de otra clase (superclase), evitando duplicaci\xf3n de c\xf3digo."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Ejemplo real:"})," ",(0,s.jsx)(n.code,{children:"Bird"})," hereda de ",(0,s.jsx)(n.code,{children:"Animal"}),", por lo tanto, todos los p\xe1jaros son animales."]}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\n    class Animal {\n        +String name\n        +void eat()\n    }\n\n    class Bird {\n        +void fly()\n    }\n\n    Animal <|-- Bird"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Beneficio:"})," Fomenta la reutilizaci\xf3n de c\xf3digo y la jerarqu\xeda entre objetos."]}),"\n",(0,s.jsx)(n.h3,{id:"polimorfismo",children:"Polimorfismo"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Definici\xf3n:"})," Permite que una ",(0,s.jsx)(n.strong,{children:"misma operaci\xf3n"})," tenga diferentes comportamientos seg\xfan el objeto que la ejecute."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Ejemplo real:"})," El m\xe9todo ",(0,s.jsx)(n.code,{children:"makeSound()"})," se comporta diferente en ",(0,s.jsx)(n.code,{children:"Dog"}),", ",(0,s.jsx)(n.code,{children:"Cat"})," o ",(0,s.jsx)(n.code,{children:"Bird"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Beneficio:"})," Facilita la extensi\xf3n del sistema sin modificar c\xf3digo existente (Open/Closed Principle)."]}),"\n",(0,s.jsx)(n.h3,{id:"c\xf3digo-en-java-de-pilares-de-poo",children:"C\xf3digo en Java de Pilares de POO"}),"\n","\n",(0,s.jsx)(n.h4,{id:"ejemplo-b\xe1sico-encapsulamiento-y-abstracci\xf3n",children:"Ejemplo b\xe1sico: Encapsulamiento y Abstracci\xf3n"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(t.A,{value:"diagrama",label:"Diagrama de Clases",children:(0,s.jsx)(n.mermaid,{value:"classDiagram\n    class BankAccount {\n        - int balance\n        + BankAccount(int)\n        + void deposit(int)\n        + void withdraw(int)\n        + int getBalance()\n    }\n\n    class BankAccountTest {\n        <<Test>>\n        + void testDepositAndWithdraw()\n    }\n\n    BankAccountTest --\x3e BankAccount : tests"})}),(0,s.jsx)(t.A,{value:"java1",label:"Modelo",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="BankAccount.java" showLineNumbers',children:"/**\n * Represents a bank account with basic encapsulation.\n */\npublic class BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (amount <= balance) balance -= amount;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n}\n"})})}),(0,s.jsx)(t.A,{value:"java2",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="BankAccountTest.java" showLineNumbers',children:"import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BankAccountTest {\n\n    @Test\n    void testDepositAndWithdraw() {\n        BankAccount acc = new BankAccount(100);\n        acc.deposit(50);\n        assertEquals(150, acc.getBalance());\n        acc.withdraw(40);\n        assertEquals(110, acc.getBalance());\n    }\n}\n"})})})]}),"\n",(0,s.jsx)(n.h4,{id:"ejemplo-intermedio-herencia-y-polimorfismo",children:"Ejemplo intermedio: Herencia y Polimorfismo"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(t.A,{value:"diagrama",label:"Diagrama de Clases",children:(0,s.jsx)(n.mermaid,{value:"classDiagram\n    class Animal {\n        <<abstract>>\n        + void makeSound()\n    }\n\n    class Dog {\n        + void makeSound()\n    }\n\n    class Cat {\n        + void makeSound()\n    }\n\n    class AnimalTrainer {\n        + void playSound(Animal animal)\n    }\n\n    Animal <|-- Dog\n    Animal <|-- Cat\n    AnimalTrainer --\x3e Animal : uses (polymorphism)"})}),(0,s.jsx)(t.A,{value:"java1",label:"Clase Padre Abstracta",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="Animal.java" showLineNumbers',children:"package animals;\n\npublic abstract class Animal {\n    public abstract void makeSound();\n}\n"})})}),(0,s.jsxs)(t.A,{value:"java2",label:"Clases Hijas",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="Dog.java" showLineNumbers',children:'package animals;\n\n// highlight-next-line\npublic class Dog extends Animal {\n    @Override\n    public void makeSound() {\n        System.out.println("Woof!");\n    }\n}\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="Cat.java" showLineNumbers',children:'package animals;\n\n// highlight-next-line\npublic class Cat extends Animal {\n    @Override\n    public void makeSound() {\n        System.out.println("Meow!");\n    }\n}\n'})})]}),(0,s.jsx)(t.A,{value:"java3",label:"Clase con aplicaci\xf3n de Polimorfismo",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="AnimalTrainer.java" showLineNumbers',children:"package animals;\n\npublic class AnimalTrainer {\n    public void playSound(Animal animal) {\n        // highlight-next-line\n        animal.makeSound(); // Polimorfismo en acci\xf3n\n    }\n}\n"})})}),(0,s.jsxs)(t.A,{value:"java4",label:"Test Unitarios",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="AnimalTest.java" showLineNumbers',children:'package animals;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AnimalTest {\n\n    @Test\n    public void testDogSound() {\n        Animal dog = new Dog();\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(output));\n\n        dog.makeSound();\n\n        assertEquals("Woof!" + System.lineSeparator(), output.toString());\n    }\n\n    @Test\n    public void testCatSound() {\n        Animal cat = new Cat();\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(output));\n\n        cat.makeSound();\n\n        assertEquals("Meow!" + System.lineSeparator(), output.toString());\n    }\n}\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="AnimalTrainerTest.java" showLineNumbers',children:'package animals;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AnimalTrainerTest {\n\n    @Test\n    public void testTrainerWithDog() {\n        AnimalTrainer trainer = new AnimalTrainer();\n        Animal dog = new Dog();\n\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(output));\n\n        trainer.playSound(dog);\n\n        assertEquals("Woof!" + System.lineSeparator(), output.toString());\n    }\n\n    @Test\n    public void testTrainerWithCat() {\n        AnimalTrainer trainer = new AnimalTrainer();\n        Animal cat = new Cat();\n\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(output));\n\n        trainer.playSound(cat);\n\n        assertEquals("Meow!" + System.lineSeparator(), output.toString());\n    }\n}\n'})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"mini-proyecto-sistema-de-gesti\xf3n-de-animales",children:"Mini proyecto: Sistema de Gesti\xf3n de Animales"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Clases: ",(0,s.jsx)(n.code,{children:"Animal"})," (abstracta), ",(0,s.jsx)(n.code,{children:"Dog"}),", ",(0,s.jsx)(n.code,{children:"Cat"}),", ",(0,s.jsx)(n.code,{children:"ZooManager"})]}),"\n",(0,s.jsxs)(n.li,{children:["Aplicaci\xf3n del polimorfismo: ",(0,s.jsx)(n.code,{children:"ZooManager"})," recorre una lista de animales y ejecuta ",(0,s.jsx)(n.code,{children:"makeSound()"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Modularidad por paquetes:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"edu.usta.domain"})," \u2192 entidades"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"edu.usta.application"})," \u2192 servicios"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"edu.usta.ui"})," \u2192 interfaz de consola"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"reflexi\xf3n-final-de-conceptos-base",children:"Reflexi\xf3n final de Conceptos Base"}),"\n",(0,s.jsx)(n.p,{children:"Principios SOLID aplicados:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"S \u2013 Single Responsibility:"})," cada clase tiene una \xfanica responsabilidad (por ejemplo, ",(0,s.jsx)(n.code,{children:"Dog"})," solo representa un perro)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"O \u2013 Open/Closed:"})," ",(0,s.jsx)(n.code,{children:"AnimalTrainer"})," est\xe1 abierto a nuevas clases (Parrot, Tiger) sin ser modificado."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"L \u2013 Liskov Substitution:"})," ",(0,s.jsx)(n.code,{children:"Dog"})," y ",(0,s.jsx)(n.code,{children:"Cat"})," pueden sustituir a Animal sin alterar la l\xf3gica."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"I \u2013 Interface Segregation:"})," aplicado si se definen m\xfaltiples interfaces como ",(0,s.jsx)(n.code,{children:"Flyable"}),", ",(0,s.jsx)(n.code,{children:"Swimmable"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"D \u2013 Dependency Inversion:"})," si se usan interfaces en vez de clases concretas (ej. ",(0,s.jsx)(n.code,{children:"Animal"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Patrones identificados:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Template Method"})," (en la clase abstracta ",(0,s.jsx)(n.code,{children:"Animal"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strategy"})," (si se define el sonido como comportamiento independiente)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"aplicaci\xf3n-pr\xe1ctica",children:"Aplicaci\xf3n pr\xe1ctica"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["En videojuegos: ",(0,s.jsx)(n.code,{children:"Enemy"})," hereda de ",(0,s.jsx)(n.code,{children:"Character"}),", cada enemigo tiene diferentes estrategias de ataque (",(0,s.jsx)(n.code,{children:"attack()"})," polim\xf3rfico)."]}),"\n",(0,s.jsxs)(n.li,{children:["En banca: ",(0,s.jsx)(n.code,{children:"Account"}),", ",(0,s.jsx)(n.code,{children:"SavingsAccount"}),", ",(0,s.jsx)(n.code,{children:"CheckingAccount"})," aplican herencia y polimorfismo."]}),"\n",(0,s.jsxs)(n.li,{children:["En sistemas acad\xe9micos: ",(0,s.jsx)(n.code,{children:"Person"}),", ",(0,s.jsx)(n.code,{children:"Student"}),", ",(0,s.jsx)(n.code,{children:"Teacher"}),", ",(0,s.jsx)(n.code,{children:"printInfo()"})," se comporta distinto."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Escenario en clase:"})," Crear jerarqu\xeda de ",(0,s.jsx)(n.code,{children:"Vehicle"}),", ",(0,s.jsx)(n.code,{children:"Car"}),", ",(0,s.jsx)(n.code,{children:"Bike"}),", ",(0,s.jsx)(n.code,{children:"Truck"})," con un m\xe9todo polim\xf3rfico ",(0,s.jsx)(n.code,{children:"move()"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"recursos-y-bibliograf\xeda",children:"Recursos y Bibliograf\xeda"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Eckel, B. (2006). Thinking in Java. Prentice Hall."}),"\n",(0,s.jsxs)(n.li,{children:["Oracle. (2024). ",(0,s.jsx)(n.a,{href:"https://docs.oracle.com/javase/tutorial/java/concepts/class.html",children:"Classes and Objects (Java Documentation)"})]}),"\n",(0,s.jsx)(n.li,{children:"Horstmann, C. S. (2020). Core Java Volume I\u2013Fundamentals. Pearson Education."}),"\n",(0,s.jsxs)(n.li,{children:["Baeldung. (2023). ",(0,s.jsx)(n.a,{href:"https://www.baeldung.com/java-oop",children:"Object-Oriented Programming in Java"})]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);