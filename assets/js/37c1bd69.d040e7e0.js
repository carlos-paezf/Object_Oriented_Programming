"use strict";(self.webpackChunkobject_oriented_programming=self.webpackChunkobject_oriented_programming||[]).push([[8932],{3476:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"block-01_oop-fundamentals/POJO_UML_basic","title":"POJO y UML B\xe1sico","description":"\xbfQu\xe9 es un POJO?","source":"@site/docs/block-01_oop-fundamentals/03_POJO_UML_basic.md","sourceDirName":"block-01_oop-fundamentals","slug":"/block-01_oop-fundamentals/POJO_UML_basic","permalink":"/Object_Oriented_Programming_Intersemester/docs/block-01_oop-fundamentals/POJO_UML_basic","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/block-01_oop-fundamentals/03_POJO_UML_basic.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Introducci\xf3n a la Programaci\xf3n Orientada a Objetos","permalink":"/Object_Oriented_Programming_Intersemester/docs/block-01_oop-fundamentals/OOP-introduction"},"next":{"title":"Unit Testing con JUnit para JDK 21+","permalink":"/Object_Oriented_Programming_Intersemester/docs/block-01_oop-fundamentals/unit_testing_maven"}}');var r=i(4848),a=i(8453),s=i(1470),o=i(9365);const l={sidebar_position:3},d="POJO y UML B\xe1sico",c={},h=[{value:"\xbfQu\xe9 es un POJO?",id:"qu\xe9-es-un-pojo",level:2},{value:"C\xf3digo en Java",id:"c\xf3digo-en-java",level:3},{value:"\xbfQu\xe9 es UML?",id:"qu\xe9-es-uml",level:2},{value:"\xbfQu\xe9 es PlantUML?",id:"qu\xe9-es-plantuml",level:3},{value:"Analog\xeda B\xe1sica",id:"analog\xeda-b\xe1sica",level:2},{value:"Actividad",id:"actividad",level:2},{value:"Mini proyecto: Sistema de Biblioteca (versi\xf3n POJO)",id:"mini-proyecto-sistema-de-biblioteca-versi\xf3n-pojo",level:2},{value:"Reflexi\xf3n final",id:"reflexi\xf3n-final",level:2},{value:"Aplicaci\xf3n pr\xe1ctica",id:"aplicaci\xf3n-pr\xe1ctica",level:2},{value:"Recursos y Bibliograf\xeda",id:"recursos-y-bibliograf\xeda",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pojo-y-uml-b\xe1sico",children:"POJO y UML B\xe1sico"})}),"\n",(0,r.jsx)(n.h2,{id:"qu\xe9-es-un-pojo",children:"\xbfQu\xe9 es un POJO?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"POJO (Plain Old Java Object)"})," es un objeto Java ",(0,r.jsx)(n.strong,{children:"sencillo y aut\xf3nomo"})," que no depende de ninguna tecnolog\xeda, framework o API externa (como Spring, Hibernate, etc.). Es la forma m\xe1s limpia y pura de representar una ",(0,r.jsx)(n.strong,{children:"entidad del dominio"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Caracter\xedsticas de un POJO:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tiene atributos privados."}),"\n",(0,r.jsx)(n.li,{children:"Posee constructores, setters y getters."}),"\n",(0,r.jsxs)(n.li,{children:["Puede implementar ",(0,r.jsx)(n.code,{children:"toString()"}),", ",(0,r.jsx)(n.code,{children:"equals()"})," y ",(0,r.jsx)(n.code,{children:"hashCode()"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"No extiende de clases espec\xedficas ni implementa interfaces no necesarias."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Ejemplo real:"})," Representar un libro (",(0,r.jsx)(n.code,{children:"Book"}),") solo con su t\xedtulo, autor, a\xf1o y c\xf3digo ISBN."]}),"\n",(0,r.jsx)(n.h3,{id:"c\xf3digo-en-java",children:"C\xf3digo en Java"}),"\n","\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(o.A,{value:"diagrama",label:"Diagrama de Clases",children:(0,r.jsx)(n.mermaid,{value:"classDiagram\n    class Book {\n        - String title\n        - String author\n        - int year\n        - String isbn\n        + Book(String, String, int, String)\n        + String getTitle()\n        + void setTitle(String)\n        + String getAuthor()\n        + void setAuthor(String)\n        + int getYear()\n        + void setYear(int)\n        + String getIsbn()\n        + void setIsbn(String)\n        + String toString()\n    }\n\n    class BookTest  {\n        <<Test>>\n        + void testBookToString()\n        + void testSetAndGetTitle()\n    }\n\n    BookTest  --\x3e Book : tests"})}),(0,r.jsx)(o.A,{value:"java1",label:"Clase POJO",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Book.java" showLineNumbers',children:'/**\n * Represents a book entity in a library system.\n */\npublic class Book {\n    private String title;\n    private String author;\n    private int year;\n    private String isbn;\n\n    /**\n     * Constructs a new Book with basic information.\n     * @param title Title of the book.\n     * @param author Author of the book.\n     * @param year Year of publication.\n     * @param isbn ISBN code of the book.\n     */\n    public Book(String title, String author, int year, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.year = year;\n        this.isbn = isbn;\n    }\n\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n\n    public String getAuthor() { return author; }\n    public void setAuthor(String author) { this.author = author; }\n\n    public int getYear() { return year; }\n    public void setYear(int year) { this.year = year; }\n\n    public String getIsbn() { return isbn; }\n    public void setIsbn(String isbn) { this.isbn = isbn; }\n\n    @Override\n    public String toString() {\n        return title + " by " + author + " (" + year + ")";\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"java2",label:"Test Unitarios",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="BookTest.java" showLineNumbers',children:'import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BookTest {\n\n    @Test\n    void testBookToString() {\n        Book book = new Book("Clean Code", "Robert C. Martin", 2008, "9780132350884");\n        assertEquals("Clean Code by Robert C. Martin (2008)", book.toString());\n    }\n\n    @Test\n    void testSetAndGetTitle() {\n        Book book = new Book("Title", "Author", 2020, "123");\n        book.setTitle("New Title");\n        assertEquals("New Title", book.getTitle());\n    }\n}\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"qu\xe9-es-uml",children:"\xbfQu\xe9 es UML?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UML (Unified Modeling Language)"})," es un lenguaje gr\xe1fico que permite ",(0,r.jsx)(n.strong,{children:"modelar sistemas orientados a objetos"}),". Tambi\xe9n podr\xedamos definirlo como un ",(0,r.jsx)(n.strong,{children:"lenguaje visual estandarizado"})," para representar la estructura, comportamiento e interacciones de un sistema orientado a objetos."]}),"\n",(0,r.jsx)(n.p,{children:"En la Programaci\xf3n Orientada a Objetos tenemos los siguientes tipos de diagramas UML m\xe1s comunes:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Tipo de diagrama"}),(0,r.jsx)(n.th,{children:"Prop\xf3sito"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Diagrama de clases"})}),(0,r.jsx)(n.td,{children:"Representar entidades del sistema (clases, atributos, m\xe9todos, relaciones)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Diagrama de casos de uso"})}),(0,r.jsx)(n.td,{children:"Representar interacciones entre actores y el sistema"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Diagrama de secuencia"})}),(0,r.jsx)(n.td,{children:"Modelar la interacci\xf3n temporal entre objetos"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Diagrama de actividades"})}),(0,r.jsx)(n.td,{children:"Mostrar flujos de trabajo o procesos"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["Por ejemplo, en el ",(0,r.jsx)(n.strong,{children:"diagrama de clases"})," UML se representan:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Clases"}),"\n",(0,r.jsx)(n.li,{children:"Atributos"}),"\n",(0,r.jsx)(n.li,{children:"M\xe9todos"}),"\n",(0,r.jsx)(n.li,{children:"Relaciones (asociaci\xf3n, herencia, composici\xf3n, etc.)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"S\xedmbolos b\xe1sicos:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"+"})," p\xfablico"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-"})," privado"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"#"})," protegido"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~"})," est\xe1tico"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"*"})," multiplicidad (n\xfamero de instancias)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"qu\xe9-es-plantuml",children:"\xbfQu\xe9 es PlantUML?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PlantUML"})," es una herramienta que permite crear ",(0,r.jsx)(n.strong,{children:"diagramas UML mediante c\xf3digo textual"}),'. En lugar de arrastrar y soltar elementos gr\xe1ficos, el usuario escribe una especie de "lenguaje de marcado" para generar los diagramas autom\xe1ticamente.']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Ventajas"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ligero y r\xe1pido."}),"\n",(0,r.jsx)(n.li,{children:"Versionable en Git."}),"\n",(0,r.jsx)(n.li,{children:"Compatible con Markdown, Docusaurus y VSCode."}),"\n",(0,r.jsx)(n.li,{children:"Ideal para generar documentaci\xf3n autom\xe1tica de c\xf3digo."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Un diagrama en PlantUML se v\xe9 de la siguiente manera:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-puml",children:"@startuml\nclass Book {\n    - title: String\n    - author: String\n    + getTitle(): String\n    + setTitle(String): void\n}\n@enduml\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Este c\xf3digo genera una imagen de un diagrama de clase con la clase ",(0,r.jsx)(n.code,{children:"Book"}),", sus atributos y m\xe9todos."]}),"\n",(0,r.jsx)(n.p,{children:"Para trabajar con PlantUML en VSCode debes:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Tener conexi\xf3n a internet para renderizado online, o instalar Graphviz para render local."}),"\n",(0,r.jsx)(n.li,{children:'Instalar la extensi\xf3n "PlantUML" con mayor n\xfamero de usuarios.'}),"\n",(0,r.jsxs)(n.li,{children:["Crear un archivo ",(0,r.jsx)(n.code,{children:".puml"})," o ",(0,r.jsx)(n.code,{children:".plantuml"})," con el c\xf3digo del diagrama."]}),"\n",(0,r.jsxs)(n.li,{children:["Presionar ",(0,r.jsx)(n.strong,{children:"Alt + D"}),' o hacer click derecho y luego seleccionar "Preview Current Diagram".']}),"\n",(0,r.jsx)(n.li,{children:'Puedes exportar el diagrama a formato PNG o SVG usando el comando "Export Current Diagram"'}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"analog\xeda-b\xe1sica",children:"Analog\xeda B\xe1sica"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"POJO como un envase limpio y etiquetado"}),"\n",(0,r.jsx)(n.p,{children:"Imagina que un POJO es como una botella transparente con etiqueta:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Contiene un l\xedquido (datos como ",(0,r.jsx)(n.code,{children:"title"}),", ",(0,r.jsx)(n.code,{children:"author"}),", etc.)."]}),"\n",(0,r.jsx)(n.li,{children:"Tiene tapa (acceso controlado con getters/setters)."}),"\n",(0,r.jsxs)(n.li,{children:["No hace nada m\xe1s que ",(0,r.jsx)(n.strong,{children:"guardar datos de forma ordenada"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"No tiene chips, sensores, ni botones (no depende de frameworks ni librer\xedas externas)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Es una estructura de datos pura, como un frasco que contiene informaci\xf3n pero no interact\xfaa con el mundo por s\xed solo."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"UML como el plano de una casa"}),"\n",(0,r.jsx)(n.p,{children:"Antes de construir una casa, necesitas un plano arquitect\xf3nico. Este no tiene cemento, ladrillos ni electricidad, pero:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dice d\xf3nde estar\xe1 cada habitaci\xf3n (clase)."}),"\n",(0,r.jsx)(n.li,{children:"Qu\xe9 tendr\xe1 dentro (atributos y m\xe9todos)."}),"\n",(0,r.jsx)(n.li,{children:"Qu\xe9 puertas conectan una habitaci\xf3n con otra (relaciones entre clases)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"UML no construye el sistema, pero lo visualiza antes de codificarlo."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"actividad",children:"Actividad"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Construcci\xf3n manual de una clase User con atributos b\xe1sicos (id, name, email)."}),"\n",(0,r.jsx)(n.li,{children:"Dibujar en grupo el diagrama UML en papel (nombre, atributos, m\xe9todos)."}),"\n",(0,r.jsx)(n.li,{children:"Uso de PlantUML o draw.io para digitalizar el diagrama."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"mini-proyecto-sistema-de-biblioteca-versi\xf3n-pojo",children:"Mini proyecto: Sistema de Biblioteca (versi\xf3n POJO)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Clase ",(0,r.jsx)(n.code,{children:"Book"}),": t\xedtulo, autor, a\xf1o, ISBN"]}),"\n",(0,r.jsxs)(n.li,{children:["Clase ",(0,r.jsx)(n.code,{children:"User"}),": id, nombre, correo"]}),"\n",(0,r.jsxs)(n.li,{children:["Clase ",(0,r.jsx)(n.code,{children:"Loan"}),": fecha, libro, usuario"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reto:"})," Modelar y construir los tres POJOs + sus UMLs + documentaci\xf3n."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pistas:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Loan"})," debe tener referencias a ",(0,r.jsx)(n.code,{children:"Book"})," y ",(0,r.jsx)(n.code,{children:"User"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Uso de agregaci\xf3n en UML."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-puml",children:"@startuml\nclass Loan {\n    - date: LocalDate\n    - book: Book\n    - user: User\n    + getDate(): LocalDate\n    + getBook(): Book\n    + getUser(): User\n}\nLoan o-- Book\nLoan o-- User\n@enduml\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Resultado:"})}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(o.A,{value:"diagrma",label:"Diagrama de Clases",children:(0,r.jsx)(n.mermaid,{value:"classDiagram\n    class Book {\n        - String title\n        - String author\n        - int year\n        - String isbn\n        + String getTitle()\n        + void setTitle(String)\n        + String getAuthor()\n        + void setAuthor(String)\n        + int getYear()\n        + void setYear(int)\n        + String getIsbn()\n        + void setIsbn(String)\n        + String toString()\n    }\n\n    class Loan {\n        - LocalDate date\n        - Book book\n        - User user\n        + LocalDate getDate()\n        + void setDate(LocalDate)\n        + Book getBook()\n        + void setBook(Book)\n        + User getUser()\n        + void setUser(User)\n    }\n\n    class User {\n        - String id\n        - String name\n        - String email\n        + String getId()\n        + void setId(String)\n        + String getName()\n        + void setName(String)\n        + String getUser()\n        + void setUser(String)\n    }\n\n    Loan o-- Book : has\n    Loan o-- User : has"})}),(0,r.jsx)(o.A,{value:"plantUML",label:"C\xf3digo PlantUML",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-puml",metastring:'title="basicUML.puml" showLineNumbers',children:"@startuml basicUML\nclass Book {\n    - title: String\n    - author: String\n    - year: int\n    - isbn: String\n    + getTitle(): String\n    + setTitle(String): void\n    + getAuthor(): String\n    + setAuthor(String): void\n    + getYear(): int\n    + setYear(int): void\n    + getIsbn(): String\n    + setIsbn(String): void\n    + toString(): String\n}\n\nclass Loan {\n    - date: LocalDate\n    - book: Book\n    - user: User\n    + getDate(): LocalDate\n    + setDate(LocalDate): void\n    + getBook(): Book\n    + setBook(Book): void\n    + getUser(): User\n    + setUser(User): void\n}\n\nclass User {\n    - id: String\n    - name: String\n    - email: String\n    + getId(): String\n    + setId(String): void\n    + getName(): String\n    + setName(String): void\n    + getUser(): String\n    + setUser(String): void\n}\n\nLoan o-- Book\nLoan o-- User\n@enduml\n"})})}),(0,r.jsxs)(o.A,{value:"java",label:"POJOs - C\xf3digo Java",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Book.java" showLineNumbers',children:'package domain;\n\n/**\n * Represents a book in the library system.\n * Each book has a title, an author, a publication year, and an ISBN code.\n * Provides methods to access and modify book details.\n */\npublic class Book {\n    private String title;\n    private String author;\n    private int year;\n    private String isbn;\n\n    /**\n     * Constructs a new Book with the specified details.\n     *\n     * @param title the title of the book\n     * @param author the author of the book\n     * @param year the year of publication\n     * @param isbn the ISBN code of the book\n     */\n    public Book(String title, String author, int year, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.year = year;\n        this.isbn = isbn;\n    }\n\n    /**\n     * Gets the title of the book.\n     * @return the book title\n     */\n    public String getTitle() {\n        return title;\n    }\n\n    /**\n     * Sets the title of the book.\n     * @param title the new title\n     */\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    /**\n     * Gets the author of the book.\n     * @return the book author\n     */\n    public String getAuthor() {\n        return author;\n    }\n\n    /**\n     * Sets the author of the book.\n     * @param author the new author\n     */\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    /**\n     * Gets the publication year.\n     * @return the publication year\n     */\n    public int getYear() {\n        return year;\n    }\n\n    /**\n     * Sets the publication year.\n     * @param year the new year\n     */\n    public void setYear(int year) {\n        this.year = year;\n    }\n\n    /**\n     * Gets the ISBN code.\n     * @return the ISBN\n     */\n    public String getIsbn() {\n        return isbn;\n    }\n\n    /**\n     * Sets the ISBN code.\n     * @param isbn the new ISBN\n     */\n    public void setIsbn(String isbn) {\n        this.isbn = isbn;\n    }\n\n    /**\n     * Returns a string representation of the book.\n     * @return formatted book details\n     */\n    @Override\n    public String toString() {\n        return title + " by " + author + " (" + year + ") - ISBN: " + isbn;\n    }\n}\n\n'})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="User.java" showLineNumbers',children:"package domain;\n\n/**\n * Represents a user who borrows books.\n * Each user has an ID, a name, and an email address.\n */\npublic class User {\n    private String id;\n    private String name;\n    private String email;\n\n    /**\n     * Constructs a new User with the given data.\n     *\n     * @param id the unique identifier for the user\n     * @param name the name of the user\n     * @param email the email address of the user\n     */\n    public User(String id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n    }\n\n    /**\n     * Gets the user ID.\n     * @return the ID\n     */\n    public String getId() {\n        return id;\n    }\n\n    /**\n     * Sets the user ID.\n     * @param id the new ID\n     */\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    /**\n     * Gets the user's name.\n     * @return the name\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Sets the user's name.\n     * @param name the new name\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * Gets the user's email address.\n     * @return the email\n     */\n    public String getEmail() {\n        return email;\n    }\n\n    /**\n     * Sets the user's email address.\n     * @param email the new email\n     */\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Loan.java" showLineNumbers',children:"package domain;\n\nimport java.time.LocalDate;\n\n/**\n * Represents a loan (borrowing transaction) in the system.\n * Associates a book and a user with the date of the loan.\n */\npublic class Loan {\n    private LocalDate date;\n    private Book book;\n    private User user;\n\n    /**\n     * Constructs a new Loan with the specified date, book, and user.\n     *\n     * @param date the date of the loan\n     * @param book the borrowed book\n     * @param user the user who borrows the book\n     */\n    public Loan(LocalDate date, Book book, User user) {\n        this.date = date;\n        this.book = book;\n        this.user = user;\n    }\n\n    /**\n     * Gets the loan date.\n     * @return the date\n     */\n    public LocalDate getDate() {\n        return date;\n    }\n\n    /**\n     * Sets the loan date.\n     * @param date the new date\n     */\n    public void setDate(LocalDate date) {\n        this.date = date;\n    }\n\n    /**\n     * Gets the borrowed book.\n     * @return the book\n     */\n    public Book getBook() {\n        return book;\n    }\n\n    /**\n     * Sets the borrowed book.\n     * @param book the new book\n     */\n    public void setBook(Book book) {\n        this.book = book;\n    }\n\n    /**\n     * Gets the user who borrowed the book.\n     * @return the user\n     */\n    public User getUser() {\n        return user;\n    }\n\n    /**\n     * Sets the user who borrowed the book.\n     * @param user the new user\n     */\n    public void setUser(User user) {\n        this.user = user;\n    }\n}\n"})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"reflexi\xf3n-final",children:"Reflexi\xf3n final"}),"\n",(0,r.jsx)(n.p,{children:"Principios SOLID aplicados:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"S \u2013 Single Responsibility:"})," cada POJO representa solo una entidad (sin l\xf3gica extra)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O \u2013 Open/Closed:"})," se pueden extender funcionalidades sin modificar la clase base."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Patrones aplicados:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Value Object:"})," los POJOs representan datos sin l\xf3gica de negocio compleja."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composition:"})," en Loan, se incluyen objetos Book y User."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"aplicaci\xf3n-pr\xe1ctica",children:"Aplicaci\xf3n pr\xe1ctica"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Sistemas universitarios: ",(0,r.jsx)(n.code,{children:"Student"}),", ",(0,r.jsx)(n.code,{children:"Course"}),", ",(0,r.jsx)(n.code,{children:"Enrollment"})]}),"\n",(0,r.jsxs)(n.li,{children:["E-commerce: ",(0,r.jsx)(n.code,{children:"Product"}),", ",(0,r.jsx)(n.code,{children:"Customer"}),", ",(0,r.jsx)(n.code,{children:"Order"})]}),"\n",(0,r.jsxs)(n.li,{children:["Videojuegos: ",(0,r.jsx)(n.code,{children:"Character"}),", ",(0,r.jsx)(n.code,{children:"Weapon"}),", ",(0,r.jsx)(n.code,{children:"Inventory"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"recursos-y-bibliograf\xeda",children:"Recursos y Bibliograf\xeda"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Oracle. (2024). ",(0,r.jsx)(n.a,{href:"https://docs.oracle.com/javaee/6/tutorial/doc/gjbnr.html",children:"Creating and Using Plain Old Java Objects (POJO)"})]}),"\n",(0,r.jsx)(n.li,{children:"Ambler, S. W. (2004). The Object Primer: Agile Model-Driven Development with UML 2.0. Cambridge University Press."}),"\n",(0,r.jsxs)(n.li,{children:["Sitio oficial de ",(0,r.jsx)(n.a,{href:"https://plantuml.com/",children:"PlantUML"})]}),"\n",(0,r.jsxs)(n.li,{children:["Plugin para VSCode: ",(0,r.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml",children:"PlantUML extension - Visual Studio Marketplace"})]}),"\n",(0,r.jsxs)(n.li,{children:["Documentaci\xf3n de Java para UML: ",(0,r.jsx)(n.a,{href:"https://docs.oracle.com/javase/tutorial/extra/",children:"Oracle Java UML Guide"})]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);